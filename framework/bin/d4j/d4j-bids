#-------------------------------------------------------------------------------
# Copyright (c) 2014-2019 Ren√© Just, Darioush Jalali, and Defects4J contributors.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#-------------------------------------------------------------------------------

=pod

=head1 NAME

d4j-bids -- Lists all bug IDs for a project

=head1 SYNOPSIS

  d4j-bids -p project_id [-D|-A]

=head1 DESCRIPTION

This script is a high level shortcut intended to give developers access
to a list of bug IDs for a chosen project. By default, the list of 
available active bug IDs is returned.

=head1 OPTIONS

=over 4

=item -p C<project_id>

The ID of the project for which the list of bug IDs is requested. A project ID
must be provided to use this utility script.

=item -D

Include only deprecated bugs. By default, only IDs of active bugs are listed.
Cannot be used in conjunction with "all bugs" (-A).

=item -A

Include both active and deprecated bugs. By default, only IDs of active bugs are 
listed. Cannot be used in conjunction with "only deprecated bugs" (-D).

=back

=cut

use strict;
use warnings;

use Constants;
use Getopt::Std;
use Query;

#
# Issue usage message and quit
#
sub _usage {
    print "usage: $0 -p project_id [-D|-A]\n";
    exit 1;
}

# Process command line options
my %cmd_opts;
getopts('p:DA', \%cmd_opts) or _usage();

_usage() unless defined $cmd_opts{p};

my $PID = $cmd_opts{p};
my $ONLY_DEP = defined $cmd_opts{D} ? 1 : 0;
my $ALL_BUGS = defined $cmd_opts{A} ? 1 : 0;

if ($ONLY_DEP and $ALL_BUGS) {
    die "-D (only deprecated bugs) and -A (all bugs) cannot be concurrently set.";
}

my %results;
my @requested = $BUGS_CSV_BUGID;
if ($ONLY_DEP) {
    %results = Query::query_metadata($PID, "D", @requested);
} elsif ($ALL_BUGS) {
    %results = Query::query_metadata($PID, "A", @requested);
} else{
    %results = Query::query_metadata($PID, "C", @requested);
}

foreach my $bug_id (sort { $a <=> $b } keys %results) {
   print "$bug_id\n";
}

1;
